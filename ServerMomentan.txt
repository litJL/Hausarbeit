#include <iostream>
#include <arpa/inet.h> //Wahrscheinlich für Adressfamilie
#include <sys/socket.h> //Für die Sockets
#include <unistd.h>
#include <fstream> //Für Streams
#include <string>

#define BUFLEN 20 //Länge des Buffers
#define PORT 4400 //Port

using namespace std;

int main(void)
{
  struct sockaddr_in si_me={0};
  struct sockaddr_in si_other={0};
  int s, slen=sizeof(si_other); //Socket
  char buf[BUFLEN],bufCode[3],codeRec; //Zu erhaltener Buffer
  string buffer,bufCom; //Erhaltener Buffer wird konvertiert und in diesem String gespeichert

  s=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP); //Socket erstellen

  si_me.sin_family = AF_INET; //Addressfamilie definieren für Socket
  si_me.sin_port = htons(PORT); //Port definieren für Socket
  si_me.sin_addr.s_addr = htonl(INADDR_ANY); //Ich hab echt keine Ahnung was das soll aber es machts halt

  bind(s, (sockaddr*)&si_me, sizeof(si_me)); //Dem Socket einen Namen geben [Server-Side] connect() [Client-Side]

  while (true) //Konstant Netzwerk auslesen
  {
        recvfrom(s, bufCode, 3, 0, (sockaddr *)&si_other, (socklen_t*)&slen); //Buffer erhalten falls einer kommt. Idk was die drei letzten Nullen machen
        bufCom = bufCode;
        if(bufCom == "get"){
		codeRec = 'y';
		sendto(s,codeRec,1,0,(sockaddr *)&si_other,slen);
		recvfrom(s,buf,BUFLEN,0, (sockaddr *)&si_other, (socklen_t*)&slen)
		buffer = buf;
		buffer = "cat " + buffer;
		system(buffer);
	}
  }

  close(s); //Socket schließen
  return 0;
}
